use crate::calc_ast::{Operator, Type, Term, Tree};
grammar;

pub ExprLine: Box<Tree> = {
    <t:term> "->" <to:format> => {
        Box::new(Tree{format: to, exp: t})
    },
}

term: Box<Term> = {
    "(" <e1:term> <o:op> <e2:term> ")" => {
        Box::new(Term::Line(e1, o, e2))
    },
    "~" <e:term> => {
        Box::new(Term::Negate(e))
    },
    <n:num> => Box::new(Term::Val(n)),
}

num: u64 = {
    <d:d64> => d,
    <x:x64> => x,
    <b:b64> => b,
}

format: Type = {
    "d" => Type::Decimal,
    "x" => Type::Hex,
    "b" => Type::Binary,
}

op: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Subtract,
    "<<" => Operator::LShift,
    ">>" => Operator::RShift,
    "*" => Operator::Mul,
    "/" => Operator::Div,
}

d64: u64 = {
    <s:r"-[0-9]+"> => {
        let ret = i64::from_str_radix(s, 10).expect("Invalid decimal integer");
        ret as u64
    },
    <s:r"[0-9]+"> => {
        u64::from_str_radix(s, 10).expect("Invalid decimal integer")
    },
}

x64: u64 = {
    <s:r"0x[0-9a-fA-F]+"> => {
        u64::from_str_radix(&s[2..], 16).expect("Invalid hex")
    },
}

b64: u64 = {
    <s:r"0b[0-1]+"> => {
        u64::from_str_radix(&s[2..], 2).expect("Invalid binary")
    }
}